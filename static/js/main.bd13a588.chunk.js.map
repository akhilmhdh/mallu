{"version":3,"sources":["components/HeaderApp/headerApp.js","components/CanvasApp/canvasApp.js","components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderApp","props","className","alphabet","onClick","clear","src","process","alt","style","opacity","loading","CanvasApp","height","width","alphabetIs","setLoading","canvas","useRef","useEffect","current","fabric","Canvas","freeDrawingBrush","backgroundColor","isDrawingMode","color","renderAll","on","sendPaint","event","Axios","post","toDataURL","then","res","Number","data","id","defaultProps","Footer","App","useState","setAlphabet","setClear","el","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd13a588.chunk.js","sourcesContent":["import React from 'react';\nimport \"./headerAppStyle.css\"\n\nconst HeaderApp = (props) =>{\n\n    const pronounce=[\"Aa\",\"Aaaa\",\"E\",\"U\",\"Ea\",\"Eaa\",\"O\",\n    \"Ka\",\"Kha\",\"Ga\",\"Gha\",\"Inga\",\n    \"Cha\",\"Chha\",\"Ja\",\"Jha\",\"Inha\",\n    \"Ta\",\"Tta\",\"Da\",\"Dda\",\"Nha\",\n    \"Tha\",\"Thha\",\"Dha\",\"Dhha\",\"Na\",\n    \"Pa\",\"Ffa\",\"Ba\",\"Bha\",\"Ma\",\n    \"Ya\",\"Ra\",\"Rha\",\"La\",\"Lha\",\"Zha\",\"Va\",\"Sha\",\"Shha\",\"Sa\",\"Ha\",\n    \"Inh\",\"In\",\"Irr\",\"Ill\",\"Ilh\"]\n\n    return (\n        <div className=\"headerAppContainer\">\n            <div>MALLU</div>\n            <div>\n                {pronounce[props.alphabet]}\n            </div>\n            <div onClick={()=>{props.clear()}}>\n                <img src={process.env.PUBLIC_URL+\"/images/duster.svg\"}\n                className=\"icon icon-duster\" alt=\"clean\"/>\n            </div>\n            <div style={{opacity:`${props.alphabet==null?0:1}`}}>\n                {props.loading\n                    ?<img src={process.env.PUBLIC_URL+`/images/spinner.png`}\n                    className=\"icon icon-spinner\" alt=\"alphabet\"/>\n                    :<img src={process.env.PUBLIC_URL+`/characters/character (${props.alphabet+1}).svg`}\n                    className=\"icon\" alt=\"alphabet\"/>}\n            </div>\n        </div>\n    )\n}\n\nexport default HeaderApp;","import React,{useRef, useEffect} from 'react'\nimport Axios from 'axios'\nimport {fabric} from \"fabric\"\n\nimport \"./canvasAppStyle.css\"\n\nconst CanvasApp = ({height,width,alphabetIs,alphabet,clear,loading,setLoading}) =>{\n\n    const canvas=useRef(null)\n\n    useEffect(()=>{\n        canvas.current=new fabric.Canvas('c')\n        canvas.current.freeDrawingBrush.width = 8;\n        canvas.current.backgroundColor=\"white\";\n        canvas.current.isDrawingMode = true;\n        canvas.current.freeDrawingBrush.color = '#000000';\n        canvas.current.renderAll();\n        canvas.current.on('mouse:up',sendPaint)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])\n\n    useEffect(()=>{\n        canvas.current.clear();\n        canvas.current.backgroundColor=\"white\";\n        canvas.current.renderAll();\n         // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[clear])\n\n    const sendPaint = (event) =>{\n      Axios.post(\"https://cr-mal.herokuapp.com//predict\",{\n          canvas: canvas.current.toDataURL(\"image/png\")\n      }).then((res)=>{\n          alphabetIs(Number(res.data.alphabet))\n          setLoading(false)\n      })\n      canvas.current.renderAll();\n      setLoading(true);\n    }\n    return(\n        <div className=\"canvasAppContainer\">   \n            <div>\n                <canvas height={height} width={width} id=\"c\"/>\n            </div>\n            <div className=\"canvas-container canvasImage\">\n            {loading\n                ?<img src={process.env.PUBLIC_URL+`/images/spinner.png`}\n                className=\"icon-spinner\" alt=\"alphabet\"/>\n                :<img src={process.env.PUBLIC_URL+`/characters/character (${alphabet+1}).svg`}\n                 alt=\"alphabet\"/>}\n            </div>\n           \n        </div>\n    )\n} \n\nCanvasApp.defaultProps = {\n    width:300,\n    height:300\n}\n\n\n\nexport default CanvasApp;","import React from \"react\"\n\nimport \"./footerStyle.css\"\n\nconst Footer = () =>{\n    return(\n        <div className=\"footerContainer\">\n            Only Single Character ഉ,എ not <s>ഹെ,കെ</s>\n            <br/>First Conversion may be slow due to free hosting Sry :)\n        </div>\n    )\n}\n\nexport default Footer;","import React,{useState} from 'react';\n\nimport HeaderApp from './components/HeaderApp/headerApp'\nimport CanvasApp from './components/CanvasApp/canvasApp'\nimport Footer from './components/Footer/footer';\n\nimport './App.css';\n\nconst App =()=>{\n  const [alphabet,setAlphabet]=useState(null)\n  const [loading,setLoading] =useState(false)\n  const [clear,setClear] = useState(false)\n\n  return(\n    <div className=\"appContainer\">\n      <HeaderApp \n      alphabet={alphabet}\n      loading={loading}\n      clear={()=>{setClear(!clear)}}\n      />\n      <CanvasApp \n      alphabetIs={(el)=>{setAlphabet(el)}}\n      alphabet={alphabet}\n      loading={loading}\n      setLoading={setLoading}\n      clear={clear}\n      />\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}